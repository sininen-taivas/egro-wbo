{"version":3,"sources":["pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Title","moc_balances","height","balance","assets","moc_status","isInitialized","isUnlocked","moc_addresses","Auth","props","React","useState","show","setShow","apiKey","setApiKey","api_key","type","onClick","title","visible","onOk","onCancel","placeholder","defaultValue","onChange","value","target","allowClear","RowInfo","setData","children","moc_data","loading","setLoading","span","icon","setTimeout","WrappedPaymentForm","create","name","form","getFieldDecorator","onSubmit","e","preventDefault","validateFields","err","values","console","log","Item","rules","required","message","prefix","validator","rule","callback","htmlType","Main","localStorage","getItem","serverAddr","setServerAddr","balances","setBalances","status","setStatus","addresses","setAddresses","gutter","addonAfter","a","setItem","level","data","isEmpty","map","key","toString","Content","Boolean","window","location","hostname","match","ReactDOM","render","className","style","background","paddingTop","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c0d0b1b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Input, Icon, Row, Col, Button, Modal, Typography, Form } from \"antd\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst KS_SERVER = \"main--serveraddr\";\nconst { Title } = Typography;\n\n// example data\nconst moc_balances = {\n    height: 104419,\n    balance: 100000,\n    assets: {}\n};\n\nconst moc_status = {\n    isInitialized: true,\n    isUnlocked: true\n};\n\nconst moc_addresses = [\"3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt\"];\n\nfunction Auth(props) {\n    const [show, setShow] = React.useState(false);\n    const { apiKey, setApiKey } = props;\n    let api_key = apiKey || \"\";\n    const onOk = () => {\n        setApiKey(api_key);\n        setShow(false);\n    };\n    return (\n        <>\n            <Button\n                type={apiKey ? \"dashed\" : \"danger\"}\n                onClick={() => setShow(true)}\n            >\n                Auth\n            </Button>\n            <Modal\n                title=\"Enter Api Key\"\n                visible={show}\n                onOk={onOk}\n                onCancel={() => setShow(false)}\n            >\n                <Input\n                    placeholder=\"Enter api_key\"\n                    defaultValue={apiKey}\n                    onChange={({ target: { value } }) => (api_key = value)}\n                    allowClear\n                />\n            </Modal>\n        </>\n    );\n}\n\nfunction RowInfo(props) {\n    const { title, setData = () => {}, children, moc_data } = props;\n    const [loading, setLoading] = useState(false);\n    return (\n        <Row>\n            <Col span={2}>{title ? title : \"\"}</Col>\n            <Col span={1}>\n                <Button\n                    type=\"link\"\n                    icon=\"reload\"\n                    loading={loading}\n                    onClick={() => {\n                        // TODO loading data\n                        setLoading(true);\n                        setTimeout(() => {\n                            setData(moc_data);\n                            setLoading(false);\n                        }, 500);\n                    }}\n                />\n            </Col>\n            <Col span={8}>{children}</Col>\n        </Row>\n    );\n}\n\nfunction PaymentForm(props) {\n    const { form } = props;\n    const { getFieldDecorator } = form;\n\n    const checkAmount = (rule, value, callback) => {\n        if (value && value < 100000)\n            callback(\"Minimal ERG value not met. Value must more then 100 000\");\n        else callback();\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        form.validateFields((err, values) => {\n            if (!err) {\n                console.log(\"Received values of form: \", values);\n            }\n        });\n    };\n\n    // const walletError = isFieldTouched(\"wallet\") && getFieldError(\"wallet\");\n    // const amountError = isFieldTouched(\"amount\") && getFieldError(\"amount\");\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Item>\n                {getFieldDecorator(\"wallet\", {\n                    rules: [\n                        {\n                            required: true,\n                            message: \"Please input wallet address!\"\n                        }\n                    ]\n                })(\n                    <Input\n                        prefix={<Icon type=\"wallet\" />}\n                        placeholder=\"Wallet address\"\n                    />\n                )}\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator(\"amount\", {\n                    rules: [\n                        { required: true, message: \"Please input amount\" },\n                        { validator: checkAmount }\n                    ]\n                })(\n                    <Input\n                        prefix={<Icon type=\"pay-circle\" />}\n                        placeholder=\"Amount\"\n                    />\n                )}\n            </Form.Item>\n            <Form.Item>\n                <Button htmlType=\"submit\">Send</Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nconst WrappedPaymentForm = Form.create({ name: \"payment_form\" })(PaymentForm);\n\nexport default function Main(props) {\n    const [serverAddr, setServerAddr] = useState(\n        localStorage.getItem(KS_SERVER) || \"\"\n    );\n    const [apiKey, setApiKey] = useState(\"\");\n    const [balances, setBalances] = useState({});\n    const [status, setStatus] = useState({});\n    const [addresses, setAddresses] = useState([]);\n\n    return (\n        <>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Input\n                        placeholder=\"Wallet node\"\n                        addonAfter={<Icon type=\"cloud-server\" />}\n                        value={serverAddr}\n                        onChange={async ({ target: { value } }) => {\n                            setServerAddr(value);\n                            localStorage.setItem(KS_SERVER, value);\n                        }}\n                    />\n                </Col>\n                {/* {Authenication} */}\n                <Col span={4}>\n                    <Auth apiKey={apiKey} setApiKey={setApiKey} />\n                </Col>\n            </Row>\n            <Title level={3}>Wallet</Title>\n            <RowInfo\n                title=\"Addresses\"\n                data={addresses}\n                setData={setAddresses}\n                moc_data={moc_addresses}\n            >\n                {!isEmpty(addresses)\n                    ? addresses.map(a => <div key={a.toString()}>{a}</div>)\n                    : \"no data\"}\n            </RowInfo>\n            <RowInfo\n                title=\"Status\"\n                data={status}\n                setData={setStatus}\n                moc_data={moc_status}\n            >\n                {!isEmpty(status) ? (\n                    <>\n                        <Col span={8}>\n                            <strong>is initialized</strong>:{\" \"}\n                            {status.isInitialized.toString()}\n                        </Col>\n                        <Col span={8}>\n                            <strong>is unlocked</strong>:{\" \"}\n                            {status.isUnlocked.toString()}\n                        </Col>\n                    </>\n                ) : (\n                    \"no data\"\n                )}\n            </RowInfo>\n            <RowInfo\n                title=\"Balances\"\n                data={balances}\n                setData={setBalances}\n                moc_data={moc_balances}\n            >\n                {!isEmpty(balances) ? (\n                    <>\n                        <Col span={8}>\n                            <strong>height</strong>: {balances.height}{\" \"}\n                        </Col>\n                        <Col span={8}>\n                            <strong>balance</strong>: {balances.balance}\n                        </Col>\n                    </>\n                ) : (\n                    \"no data\"\n                )}\n            </RowInfo>\n            <Title level={3}>Actions</Title>\n            {/* // TODO show lock/unlock according status */}\n            <Row>\n                <Button>Lock/Unlock</Button>\n            </Row>\n            <Title level={3}>Payment</Title>\n            <Row>\n                <Col span={8}>\n                    <WrappedPaymentForm />\n                </Col>\n            </Row>\n        </>\n    );\n}\n","import React from \"react\";\n// import loadable from \"@loadable/component\";\n// import Loading from \"./components/Loading\";\nimport \"./App.less\";\nimport { Layout, PageHeader } from \"antd\";\nimport MainPage from \"./pages/Main\";\n\n// Layout components\nconst { Content } = Layout;\n\n// pages\n// const MainPage = loadable(() => import(\"./pages/Main\"), {\n//     fallback: <Loading />\n// });\n\nexport default function App() {\n    // const [curMenu, setCurMenu] = useState(\"home\");\n    return (\n        <Layout className=\"app\">\n            <PageHeader title=\"ERGO Wallet BackOffice\" />\n            <Content style={{background: 'white', paddingTop: '24px'}}>\n                <MainPage />\n            </Content>\n        </Layout>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}