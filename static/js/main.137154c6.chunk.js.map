{"version":3,"sources":["components/ButtonPrompt.js","components/RowInfo.js","components/PaymentForm.js","common/api.js","common/const.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["props","useState","show","setShow","value","buttonTitle","buttonType","buttonTypeOk","modalTitle","onOk","onCancel","value_","type","onClick","title","visible","placeholder","defaultValue","onChange","target","allowClear","children","prom","loading","setLoading","span","icon","then","create","name","form","getFieldDecorator","onSubmit","e","preventDefault","validateFields","err","values","console","log","style","color","Item","rules","required","message","prefix","validator","rule","callback","htmlType","instance","axios","headers","interceptors","request","use","config","a","server","localStorage","getItem","baseURL","api_key","error","Promise","reject","Title","Main","serverAddr","setServerAddr","apiKey","setApiKey","balances","setBalances","status","setStatus","addresses","setAddresses","checkStatus","API","get","data","useEffect","isEmpty","gutter","marginBottom","addonAfter","setItem","ButtonPrompt","description","level","isUnlocked","pass","post","response","detail","RowInfo","isInitialized","toString","catch","map","key","height","balance","Content","Boolean","window","location","hostname","match","ReactDOM","render","className","background","paddingTop","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.137154c6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Modal, Input } from \"antd\";\n\n/**\n * Button with prompt window\n * @param {Object} props\n */\nexport default function(props) {\n    const [show, setShow] = useState(false);\n    const {\n        value,\n        buttonTitle = \"Set value\",\n        buttonType = \"default\",\n        buttonTypeOk = \"dashed\",\n        modalTitle = \"Enter new value\",\n        onOk = () => {},\n        onCancel = () => {}\n    } = props;\n    let value_ = value || \"\";\n\n    return (\n        <>\n            <Button\n                type={value ? buttonTypeOk : buttonType}\n                onClick={() => setShow(true)}\n            >\n                {buttonTitle}\n            </Button>\n            <Modal\n                title={modalTitle}\n                visible={show}\n                onOk={() => {\n                    onOk(value_);\n                    setShow(false);\n                }}\n                onCancel={() => {\n                    onCancel();\n                    setShow(false);\n                }}\n            >\n                <Input\n                    placeholder=\"Enter value\"\n                    defaultValue={value}\n                    onChange={({ target: { value } }) => (value_ = value)}\n                    allowClear\n                />\n            </Modal>\n        </>\n    );\n}\n","import React, {useState} from 'react';\nimport {Row, Col, Button} from 'antd';\n\nexport default function (props) {\n    const {\n        title,\n        children,\n        prom // promise, ex. API.get()\n    } = props;\n    const [loading, setLoading] = useState(false);\n    return (\n        <Row>\n            <Col span={2}>{title ? title : \"\"}</Col>\n            <Col span={1}>\n                <Button\n                    type=\"link\"\n                    icon=\"reload\"\n                    loading={loading}\n                    onClick={() => {\n                        setLoading(true);\n                        if (!prom) return;\n                        prom().then(() => {\n                            setLoading(false);\n                        });\n                    }}\n                />\n            </Col>\n            <Col span={8}>{children}</Col>\n        </Row>\n    );\n}\n","import React from 'react';\nimport {\n    Input,\n    Icon,\n    Button,\n    Form,\n} from \"antd\";\n\nfunction PaymentForm(props) {\n    const { form } = props;\n    const { getFieldDecorator } = form;\n\n    const checkAmount = (rule, value, callback) => {\n        if (value && value < 100000)\n            callback(\"Minimal ERG value not met. Value must more then 100 000\");\n        else callback();\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        form.validateFields((err, values) => {\n            if (!err) {\n                console.log(\"Received values of form: \", values);\n            }\n        });\n    };\n\n    // const walletError = isFieldTouched(\"wallet\") && getFieldError(\"wallet\");\n    // const amountError = isFieldTouched(\"amount\") && getFieldError(\"amount\");\n    return (\n        <Form onSubmit={handleSubmit}>\n            <p style={{color: 'red'}}>Not working now (in development)</p>\n            <Form.Item>\n                {getFieldDecorator(\"wallet\", {\n                    rules: [\n                        {\n                            required: true,\n                            message: \"Please input wallet address!\"\n                        }\n                    ]\n                })(\n                    <Input\n                        prefix={<Icon type=\"wallet\" />}\n                        placeholder=\"Wallet address\"\n                    />\n                )}\n            </Form.Item>\n            <Form.Item>\n                {getFieldDecorator(\"amount\", {\n                    rules: [\n                        { required: true, message: \"Please input amount\" },\n                        { validator: checkAmount }\n                        // TODO add digit only validator\n                    ]\n                })(\n                    <Input\n                        prefix={<Icon type=\"pay-circle\" />}\n                        placeholder=\"Amount\"\n                    />\n                )}\n            </Form.Item>\n            <Form.Item>\n                <Button htmlType=\"submit\">Send</Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default Form.create({ name: \"payment_form\" })(PaymentForm);\n","import axios from \"axios\";\nimport { KS_SERVER, KS_APIKEY } from \"./const\";\n\nconst instance = axios.create({\n    // baseURL: process.env.VUE_APP_API_URL,\n    headers: {\n        // \"Cache-Control\": \"no-cache, no-store, must-revalidate\"\n        // 'X-Requested-With': 'XMLHttpRequest',\n        // 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n        // 'Accept': 'application/json',\n        // 'Content-Type': 'text/plain',\n    }\n    // timeout: 30000\n});\n\ninstance.interceptors.request.use(async config => {\n    const server = localStorage.getItem(KS_SERVER);\n    config.baseURL = server || '/';\n    if (!config.headers['api_key']) {\n        const api_key = localStorage.getItem(KS_APIKEY);\n        if (api_key) config.headers['api_key'] = api_key;\n    }\n    return config;\n}, error => Promise.reject(error));\n\nexport default instance;","export const KS_SERVER = \"main--serveraddr\";\nexport const KS_APIKEY = \"main--k\";\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Input,\n    Icon,\n    Row,\n    Col,\n    Button,\n    Typography,\n    Empty,\n    message\n} from \"antd\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { KS_SERVER, KS_APIKEY } from \"../common/const\";\nimport ButtonPrompt from \"../components/ButtonPrompt\";\nimport RowInfo from \"../components/RowInfo\";\nimport PaymentForm from '../components/PaymentForm';\nimport API from \"../common/api\";\n\nconst { Title } = Typography;\n\nexport default function Main(props) {\n    const [serverAddr, setServerAddr] = useState(\n        localStorage.getItem(KS_SERVER) || \"\"\n    );\n    const [apiKey, setApiKey] = useState(localStorage.getItem(KS_APIKEY) || \"\");\n    const [balances, setBalances] = useState({});\n    const [status, setStatus] = useState({});\n    const [addresses, setAddresses] = useState([]);\n\n    const checkStatus = () =>\n        API.get(\"/wallet/status\").then(({ data }) => {\n            setStatus(data);\n            return data;\n        });\n\n    // on mount\n    useEffect(() => {\n        if (!isEmpty(serverAddr) && !isEmpty(apiKey)) checkStatus();\n    }, [serverAddr, apiKey]);\n\n    return (\n        <>\n            <Row gutter={8} style={{ marginBottom: \"8px\" }}>\n                <Col span={8}>\n                    <Input\n                        placeholder=\"Wallet node\"\n                        addonAfter={<Icon type=\"cloud-server\" />}\n                        value={serverAddr}\n                        onChange={({ target: { value } }) => {\n                            setServerAddr(value);\n                            localStorage.setItem(KS_SERVER, value);\n                        }}\n                    />\n                </Col>\n                {/* {Authenication} */}\n                <Col span={4}>\n                    <ButtonPrompt\n                        buttonTitle=\"Auth\"\n                        modalTitle=\"Enter api_key\"\n                        value={apiKey}\n                        onOk={api_key => {\n                            localStorage.setItem(KS_APIKEY, api_key);\n                            setApiKey(api_key);\n                        }}\n                    />\n                </Col>\n            </Row>\n            {!isEmpty(serverAddr) && !isEmpty(apiKey) ? (\n                <>\n                    <Title level={3}>\n                        Wallet\n                        {status.isUnlocked === false && (\n                            <ButtonPrompt\n                                buttonTitle=\"Unlock\"\n                                buttonType=\"link\"\n                                onOk={async pass => {\n                                    try {\n                                        await API.post(\"/wallet/unlock\", {\n                                            pass\n                                        });\n                                        await checkStatus();\n                                    } catch ({ response }) {\n                                        message.error(\n                                            `Unlock error: ${response.data.detail}`\n                                        );\n                                    }\n                                }}\n                            />\n                        )}\n                        {status.isUnlocked === true && (\n                            <Button\n                                type=\"link\"\n                                onClick={async () => {\n                                    try {\n                                        await API.get(\"/wallet/lock\");\n                                        await checkStatus();\n                                    } catch ({ response }) {\n                                        message.error(\n                                            `Lock error: ${response.data.detail}`\n                                        );\n                                    }\n                                }}\n                            >\n                                Lock\n                            </Button>\n                        )}\n                    </Title>\n                    <RowInfo title=\"Status\" prom={checkStatus}>\n                        {!isEmpty(status) ? (\n                            <>\n                                <Col span={8}>\n                                    <strong>is initialized</strong>:{\" \"}\n                                    {status.isInitialized.toString()}\n                                </Col>\n                                <Col span={8}>\n                                    <strong>is unlocked</strong>:{\" \"}\n                                    {status.isUnlocked.toString()}\n                                </Col>\n                            </>\n                        ) : (\n                            \"no data\"\n                        )}\n                    </RowInfo>\n                    {status && status.isUnlocked && (\n                        <>\n                            <RowInfo\n                                title=\"Addresses\"\n                                prom={() =>\n                                    API.get(\"/wallet/addresses\")\n                                        .then(({ data }) => {\n                                            setAddresses(data);\n                                        })\n                                        .catch(({ response }) => {\n                                            message.error(response.data.detail);\n                                        })\n                                }\n                            >\n                                {!isEmpty(addresses)\n                                    ? addresses.map(a => (\n                                          <div key={a.toString()}>{a}</div>\n                                      ))\n                                    : \"no data\"}\n                            </RowInfo>\n                            <RowInfo\n                                title=\"Balances\"\n                                prom={() =>\n                                    API.get(\"/wallet/balances\")\n                                        .then(({ data }) => {\n                                            setBalances(data);\n                                        })\n                                        .catch(({ response }) => {\n                                            message.error(response.data.detail);\n                                        })\n                                }\n                            >\n                                {!isEmpty(balances) ? (\n                                    <>\n                                        <Col span={8}>\n                                            <strong>height</strong>:{\" \"}\n                                            {balances.height}{\" \"}\n                                        </Col>\n                                        <Col span={8}>\n                                            <strong>balance</strong>:{\" \"}\n                                            {balances.balance}\n                                        </Col>\n                                    </>\n                                ) : (\n                                    \"no data\"\n                                )}\n                            </RowInfo>\n                            <Title level={3}>Payment</Title>\n                            <Row>\n                                <Col span={8}>\n                                    <PaymentForm />\n                                </Col>\n                            </Row>\n                        </>\n                    )}\n                </>\n            ) : (\n                <Empty description=\"Enter server data\" />\n            )}\n        </>\n    );\n}\n","import React from \"react\";\n// import loadable from \"@loadable/component\";\n// import Loading from \"./components/Loading\";\nimport \"./App.less\";\nimport { Layout, PageHeader } from \"antd\";\nimport MainPage from \"./pages/Main\";\n\n// Layout components\nconst { Content } = Layout;\n\n// pages\n// const MainPage = loadable(() => import(\"./pages/Main\"), {\n//     fallback: <Loading />\n// });\n\nexport default function App() {\n    // const [curMenu, setCurMenu] = useState(\"home\");\n    return (\n        <Layout className=\"app\">\n            <PageHeader title=\"ERGO Wallet BackOffice\" />\n            <Content style={{background: 'white', paddingTop: '24px'}}>\n                <MainPage />\n            </Content>\n        </Layout>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}